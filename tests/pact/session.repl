;;
;; session.repl: test setting the session keyset
;;

(env-exec-config ["DisablePact44"])

;; Inject the public key "my-key" into the environment's session.
(env-session "my-key" [])

;; Populate the environment with two keysets.
(env-data { "keyset": ["my-key"], "bad-keyset": ["other-key"] })
(define-keyset 'k (read-keyset "keyset"))
(define-keyset 'bad-keyset (read-keyset "bad-keyset"))

;; Enforcing the session against the first keyset (which the session
;; key satisfies) should succeed.
(expect "session satisfies the keyset 'k"
  (enforce-session 'k)
  true)

;; Enforcing the session against a keyset that isn't satisfied
;; by the session key should fail.
(expect-failure "session key is not in bad-keyset"
  (enforce-session 'bad-keyset))

(module dbtest dbtest-admin

  (defcap dbtest-admin () true)

  (defschema accounts-schema
    keyset:guard
  )

  (deftable accounts:{accounts-schema})

  (defcap SESSION (account-id:string)
    (with-read accounts account-id
      { 'keyset:=keyset }
      (enforce-session keyset))
  )

  (defun test-session (account-id:string msg:string)
    (with-capability (SESSION account-id)
    (format "{} has a session, and {}" [account-id, msg]))
  )

)

(create-table accounts)
(define-keyset 'new-keyset (read-keyset "keyset"))
(insert accounts "test-user" { 'keyset: (read-keyset "keyset") })
(expect "test"
  (dbtest.test-session "test-user" "hello")
  "test-user has a session, and hello"
)
