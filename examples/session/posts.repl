;; simulate new native

(module mock g

  (defcap g () 1)

  (defschema session guard:guard)
  (deftable sessions:{session})

  (defconst CURRENT_SESSION "CURRENT_SESSION")

  (defun enforce-session (guard:guard)
    ;; for mocking, just test for equality
    (let ((sg (at 'guard (read sessions CURRENT_SESSION))))
      (enforce (= guard sg) "Invalid session")))

  (defun set-session (guard:guard)
    (write sessions CURRENT_SESSION { 'guard: guard }))

)

(create-table sessions)

(load "posts.pact")

(env-data { 'keyset: ["greg"] })

(create-account "greg" (read-keyset 'keyset) "avatar-jpg-data")

(expect-failure
 "must have active session to like"
 (like-post "greg" "post1"))

(set-session (read-keyset 'keyset))

(expect
 "succeeds with active session"
 "greg liked post post1"
 (like-post "greg" "post1"))

(expect-failure
 "must sign to update avatar"
 "Keyset failure"
 (update-avatar "greg" "another-jpg"))

(env-keys ["greg"])

(expect
 "must sign to update avatar"
 "Write succeeded"
 (update-avatar "greg" "another-jpg"))
